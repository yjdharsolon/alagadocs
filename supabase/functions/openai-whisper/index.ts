
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('Starting openai-whisper function...');
    
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      console.error('OpenAI API key not configured');
      throw new Error('Server configuration error: OpenAI API key not configured');
    }

    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      console.error('No Authorization header provided');
      throw new Error('Missing Authorization header');
    }

    let audioUrl;
    try {
      const requestData = await req.json();
      audioUrl = requestData.audioUrl;
      
      if (!audioUrl) {
        throw new Error('No audio URL provided');
      }
    } catch (parseError) {
      console.error('Error parsing request:', parseError);
      throw new Error('Invalid request format. Expected JSON with audioUrl field.');
    }

    const isSimulation = audioUrl.includes('simulation-recording');
    
    if (isSimulation) {
      console.log('Simulation mode detected, returning mock response');
      
      return new Response(
        JSON.stringify({
          transcription: "This is a simulated transcription. In a real scenario, this text would be generated by processing your audio file with OpenAI's Whisper API.",
          duration: 15.5,
          language: "en"
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 200
        }
      );
    }

    console.log('Processing audio transcription for URL:', audioUrl);

    // Add delay to ensure file is available
    await new Promise(resolve => setTimeout(resolve, 3000));

    // Fetch the audio file with retries and exponential backoff
    let audioResponse;
    let retries = 5;
    let backoffTime = 2000; // Start with 2 seconds
    
    while (retries > 0) {
      try {
        console.log(`Attempt to fetch audio file: ${6-retries}/5, URL: ${audioUrl}`);
        
        // Add cache-busting query parameter
        const cacheBuster = `?t=${Date.now()}`;
        const fetchUrl = audioUrl.includes('?') ? `${audioUrl}&cb=${Date.now()}` : `${audioUrl}${cacheBuster}`;
        
        audioResponse = await fetch(fetchUrl, {
          headers: {
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
          }
        });
        
        if (audioResponse.ok) {
          console.log('Successfully fetched audio file');
          break;
        } else {
          console.error(`Fetch attempt failed with status: ${audioResponse.status}`);
          const errorText = await audioResponse.text();
          console.error('Error response:', errorText);
        }
      } catch (err) {
        console.error(`Fetch attempt failed, ${retries - 1} retries left:`, err);
      }
      
      retries--;
      if (retries > 0) {
        console.log(`Waiting ${backoffTime}ms before next retry...`);
        await new Promise(resolve => setTimeout(resolve, backoffTime));
        backoffTime *= 2; // Exponential backoff
      } else {
        throw new Error(`Failed to fetch audio file after multiple retries`);
      }
    }

    if (!audioResponse?.ok) {
      throw new Error(`Failed to fetch audio file. Status: ${audioResponse?.status || 'unknown'}`);
    }
    
    const audioBlob = await audioResponse.blob();
    const fileSizeKB = Math.round(audioBlob.size / 1024);
    console.log(`Audio file fetched successfully, size: ${fileSizeKB}KB`);
    
    if (audioBlob.size === 0) {
      throw new Error('Audio file has zero size. The file may be corrupted or not properly uploaded.');
    }
    
    // Create FormData for OpenAI API
    const formData = new FormData();
    formData.append('file', audioBlob, 'audio.webm');
    formData.append('model', 'whisper-1');
    formData.append('language', 'en');
    formData.append('response_format', 'verbose_json');
    
    console.log('Calling OpenAI Whisper API...');
    
    // Call OpenAI API with retries
    let openaiResponse;
    let openaiRetries = 5; // Increased from 3 to 5
    let openaiBackoffTime = 2000;
    
    while (openaiRetries > 0) {
      try {
        console.log(`OpenAI API call attempt: ${6-openaiRetries}/5`);
        
        openaiResponse = await fetch('https://api.openai.com/v1/audio/transcriptions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${openaiApiKey}`
          },
          body: formData
        });
        
        if (openaiResponse.ok) {
          console.log('OpenAI API call successful');
          break;
        } else {
          const errorStatus = openaiResponse.status;
          const errorText = await openaiResponse.text();
          console.error(`OpenAI API call failed with status ${errorStatus}:`, errorText);
          
          // If rate limited, wait longer
          if (errorStatus === 429) {
            openaiBackoffTime = 10000; // 10 seconds for rate limit errors
          }
          
          // For server errors, retry
          if (errorStatus >= 500) {
            openaiRetries--;
            if (openaiRetries > 0) {
              console.log(`Retrying OpenAI API call in ${openaiBackoffTime}ms...`);
              await new Promise(resolve => setTimeout(resolve, openaiBackoffTime));
              openaiBackoffTime *= 2;
            } else {
              throw new Error(`OpenAI API server error after retries: ${errorText}`);
            }
          } else {
            // For client errors, throw immediately
            throw new Error(`OpenAI API error: ${errorText}`);
          }
        }
      } catch (err) {
        console.error(`OpenAI API call attempt failed:`, err);
        openaiRetries--;
        
        if (openaiRetries > 0) {
          console.log(`Retrying OpenAI API call in ${openaiBackoffTime}ms...`);
          await new Promise(resolve => setTimeout(resolve, openaiBackoffTime));
          openaiBackoffTime *= 2;
        } else {
          throw err;
        }
      }
    }
    
    if (!openaiResponse?.ok) {
      throw new Error('Failed to call OpenAI API after multiple retries');
    }
    
    let transcription;
    try {
      transcription = await openaiResponse.json();
    } catch (jsonError) {
      console.error('Error parsing OpenAI response:', jsonError);
      throw new Error('Failed to parse OpenAI API response');
    }
    
    console.log('Transcription successful, length:', transcription.text.length);
    
    return new Response(
      JSON.stringify({
        transcription: transcription.text,
        duration: transcription.duration || null,
        language: transcription.language || 'en'
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200
      }
    );
  } catch (error) {
    console.error('Error in whisper function:', error);
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : 'Unknown error occurred',
        timestamp: new Date().toISOString(),
        stack: error instanceof Error ? error.stack : undefined
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500
      }
    );
  }
});
