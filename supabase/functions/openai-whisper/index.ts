
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Get the authorization header from the request
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      throw new Error('Missing Authorization header');
    }

    // Get the audio URL from the request body
    const { audioUrl } = await req.json();
    
    if (!audioUrl) {
      throw new Error('No audio URL provided');
    }

    // Check if this is a simulation request
    const isSimulation = audioUrl.includes('simulation-recording');
    
    if (isSimulation) {
      console.log('Simulation mode detected, returning mock response');
      
      return new Response(
        JSON.stringify({
          transcription: "This is a simulated transcription. In a real scenario, this text would be generated by processing your audio file with OpenAI's Whisper API.",
          duration: 15.5,
          language: "en"
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 200
        }
      );
    }

    console.log('Processing audio transcription for URL:', audioUrl);

    // Add delay to ensure file is available
    await new Promise(resolve => setTimeout(resolve, 3000));

    // Fetch the audio file with retries and exponential backoff
    let audioResponse;
    let retries = 5;
    let backoffTime = 1000; // Start with 1 second
    
    while (retries > 0) {
      try {
        console.log(`Attempt to fetch audio file: ${6-retries}/5, URL: ${audioUrl}`);
        audioResponse = await fetch(audioUrl, {
          headers: {
            // Add cache-busting query parameter
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
          }
        });
        
        if (audioResponse.ok) {
          console.log('Successfully fetched audio file');
          break;
        } else {
          console.error(`Fetch attempt failed with status: ${audioResponse.status}`);
        }
      } catch (err) {
        console.error(`Fetch attempt failed, ${retries - 1} retries left:`, err);
      }
      
      retries--;
      if (retries > 0) {
        console.log(`Waiting ${backoffTime}ms before next retry...`);
        await new Promise(resolve => setTimeout(resolve, backoffTime));
        backoffTime *= 2; // Exponential backoff
      }
    }

    if (!audioResponse?.ok) {
      throw new Error(`Failed to fetch audio file after multiple retries. Status: ${audioResponse?.status || 'unknown'}`);
    }
    
    const audioBlob = await audioResponse.blob();
    const fileSizeKB = Math.round(audioBlob.size / 1024);
    console.log(`Audio file fetched successfully, size: ${fileSizeKB}KB`);
    
    if (audioBlob.size === 0) {
      throw new Error('Audio file has zero size. The file may be corrupted or not properly uploaded.');
    }
    
    // Create FormData for OpenAI API
    const formData = new FormData();
    formData.append('file', audioBlob, 'audio.webm');
    formData.append('model', 'whisper-1');
    formData.append('language', 'en');
    formData.append('response_format', 'verbose_json');
    
    // Get OpenAI API key
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      throw new Error('OpenAI API key not configured');
    }
    
    console.log('Calling OpenAI Whisper API...');
    const openaiResponse = await fetch('https://api.openai.com/v1/audio/transcriptions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`
      },
      body: formData
    });
    
    if (!openaiResponse.ok) {
      const errorText = await openaiResponse.text();
      console.error('OpenAI API error:', errorText);
      throw new Error(`OpenAI API error: ${errorText}`);
    }
    
    const transcription = await openaiResponse.json();
    console.log('Transcription successful, length:', transcription.text.length);
    
    return new Response(
      JSON.stringify({
        transcription: transcription.text,
        duration: transcription.duration,
        language: transcription.language
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200
      }
    );
  } catch (error) {
    console.error('Error in whisper function:', error);
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : 'Unknown error occurred',
        timestamp: new Date().toISOString()
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500
      }
    );
  }
});
