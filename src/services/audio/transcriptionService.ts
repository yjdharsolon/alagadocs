
import { supabase } from '@/integrations/supabase/client';
import { TranscriptionResult } from './types';

/**
 * Transcribes an audio file using the OpenAI Whisper API
 * @param audioUrl The URL of the audio file to transcribe
 * @returns The transcription result
 */
export const transcribeAudio = async (audioUrl: string): Promise<TranscriptionResult> => {
  try {
    console.log('Starting transcription process for:', audioUrl);
    
    // Ensure user is authenticated
    const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError || !sessionData.session) {
      throw new Error('Authentication error. Please log in again.');
    }
    
    // For simulation mode, if we don't need to actually call the API
    const isSimulation = audioUrl.includes('simulation-recording');
    
    let transcriptionResult: TranscriptionResult;
    
    if (isSimulation) {
      console.log('Detected simulation mode, generating mock transcription');
      // Create a simulated transcription result
      transcriptionResult = {
        text: "This is a simulated transcription. In a real scenario, this text would be generated by processing your audio file with OpenAI's Whisper API.",
        duration: 15.5,
        language: 'en'
      };
      
      // Add a slight delay to simulate API call
      await new Promise(resolve => setTimeout(resolve, 1500));
    } else {
      // Normal workflow - call the OpenAI Whisper API
      console.log('Calling OpenAI Whisper API via edge function');
      
      // Add a short delay to ensure the file is available
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Initialize transcription attempt
      let attempts = 0;
      const maxAttempts = 2;
      let lastError: Error | null = null;
      
      while (attempts < maxAttempts) {
        attempts++;
        try {
          console.log(`Transcription attempt ${attempts} for URL: ${audioUrl}`);
          
          const { data, error } = await supabase.functions.invoke('openai-whisper', {
            body: { audioUrl },
            headers: {
              Authorization: `Bearer ${sessionData.session.access_token}`
            }
          });
          
          if (error) {
            console.error(`Transcription attempt ${attempts} failed:`, error);
            lastError = new Error(error.message);
            // Wait longer before retrying
            await new Promise(resolve => setTimeout(resolve, 2000));
            continue;
          }
          
          if (!data || !data.transcription) {
            console.error(`No transcription data returned in attempt ${attempts}`);
            lastError = new Error('No transcription data returned');
            if (attempts < maxAttempts) {
              await new Promise(resolve => setTimeout(resolve, 2000));
              continue;
            }
            throw lastError;
          }
          
          transcriptionResult = {
            text: data.transcription,
            duration: data.duration,
            language: data.language
          };
          
          break;
        } catch (attemptError) {
          lastError = attemptError instanceof Error ? attemptError : new Error(String(attemptError));
          if (attempts >= maxAttempts) {
            throw lastError;
          }
        }
      }
      
      if (!transcriptionResult) {
        throw lastError || new Error('Transcription failed after multiple attempts');
      }
    }
    
    console.log('Transcription successful, updating record');
    
    // Update the transcription record with the transcribed text
    const { error: updateError } = await supabase
      .from('transcriptions')
      .update({ 
        text: transcriptionResult.text,
        status: 'completed',
        // Add additional metadata if available
        ...(transcriptionResult.duration && { duration: transcriptionResult.duration }),
        ...(transcriptionResult.language && { language: transcriptionResult.language }),
        completed_at: new Date().toISOString()
      })
      .eq('audio_url', audioUrl)
      .eq('user_id', sessionData.session.user.id);
        
    if (updateError) {
      console.error('Error updating transcription record:', updateError);
      throw new Error(`Failed to update transcription: ${updateError.message}`);
    }
    
    console.log('Transcription record updated with text:', transcriptionResult.text.substring(0, 50) + '...');
    
    return transcriptionResult;
  } catch (error) {
    console.error('Error transcribing audio:', error);
    throw error;
  }
};
